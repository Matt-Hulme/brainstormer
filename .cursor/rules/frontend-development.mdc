---
description: 
globs: 
alwaysApply: true
---
# Frontend Development Guide

## Project Structure
Key directories and their purposes:
- @frontend/src/components - Reusable UI components
- @frontend/src/pages - Page components (routes)
- @frontend/src/utils - Utility functions
- @frontend/src/config - Configuration and API setup

## Component Guidelines
1. One component per file
2. Use PascalCase for component files
3. Keep components focused and single-responsibility
4. Use composition over inheritance
5. No index.ts files - use direct imports

## Code Organization
1. React hooks at the top of components
2. State hooks alphabetized by variable name
3. Custom functions after hooks in alphabetical order
4. Use proper TypeScript types and interfaces
5. Follow import order:
   - React and external libraries
   - Types
   - Components
   - Hooks
   - Utils
   - Styles

## Type Organization
1. Keep types close to where they're used
2. Only move types to shared types directory if used in multiple places
3. Use descriptive type names
4. Export types from the same file they're defined in
5. Use interfaces for public APIs and types for internal use

## Hook Organization
1. Keep hooks colocated with their related components/pages
2. Name query hooks with verb prefix and Query suffix (e.g., useGetProjectsQuery)
3. Name mutation hooks with verb prefix and Mutation suffix (e.g., useCreateProjectMutation)
4. Keep hooks focused and single-responsibility
5. Place hooks in the same directory as their related component/page

## Styling Rules
1. Use Tailwind CSS for styling
2. Follow mobile-first approach
3. Use CSS variables for theming
4. Avoid inline styles
5. Use classnames package for conditional classes

## API Integration
1. All API configuration in config directory
2. Use typed API responses
3. Handle errors consistently
4. Use environment variables for endpoints
5. Implement proper error handling
